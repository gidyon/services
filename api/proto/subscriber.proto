syntax = "proto3";

package gidyon.apis;

option go_package="github.com/gidyon/services/pkg/api/subscriber";


import "google/protobuf/empty.proto";
import "google/api/field_behaviour.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/api/client.proto";

message Subscriber {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "Subscriber"
            description: "Party that subscribes to a channel"
		}
    };

    string subscriber_id = 1;
    string email = 2;
    string phone = 3;
    string external_id = 4;
    string device_token = 5;
    repeated ChannelSubcriber channels = 6;
}

message ChannelSubcriber {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ChannelSubcriber"
            description: "The subscription"
            required:["name", "channel_id"]
		}
    };

    string name = 1;
    string channel_id = 2;
}

message SubscriberRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "SubscriberRequest"
            description: "Request to subscribes an entity to a channel"
            required: ["subscriber_id", "channel_id"]
		}
    };

    string subscriber_id = 1 [(google.api.field_behavior) = REQUIRED];
    string channel_id = 2 [(google.api.field_behavior) = REQUIRED];
    string channel_name = 3 [(google.api.field_behavior) = OPTIONAL];
}

message ListSubscribersFilter {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ListSubscribersFilter"
			description: "Filters for retrieving subscribers"
		}
    };

    repeated string channels = 1 [(google.api.field_behavior) = REQUIRED];
}

message ListSubscribersRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ListSubscribersRequest"
			description: "Request to list subscribers for channel(s)"
		}
    };

    string page_token = 1;
    int32 page_size = 2;
    ListSubscribersFilter filter = 3;
}

message ListSubscribersResponse {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ListSubscribersResponse"
			description: "Response containing collection of subscribers"
		}
    };

    repeated Subscriber subscribers = 1;
    string next_page_token = 2;
}

message GetSubscriberRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "GetSubscriberRequest"
            description: "Request to retrieve a single subscriber"
            required: ["subscriber_id"]
		}
    };

    string subscriber_id = 1 [(google.api.field_behavior) = REQUIRED];
}

// Manages subscribers for a channel
service SubscriberAPI {
    // Subscribes a user to a channel
    rpc Subscribe (SubscriberRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/subscribers/action:subscribe",
            body: "*"
        };
        option (google.api.method_signature) = "channel_id,subscriber_id";
    }

    // Unsubscribes a user from a channel
    rpc Unsubscribe (SubscriberRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/subscribers/action:unsubscribe",
            body: "*"
        };
        option (google.api.method_signature) = "channel_id,subscriber_id";
    }

    // Lists subscribers for a channel
    rpc ListSubscribers (ListSubscribersRequest) returns (ListSubscribersResponse) {
        option (google.api.http) = {
            get: "/api/subscribers",
        };
        option (google.api.method_signature) = "channels";
    }

    // GetSubscriber retrieves information about a single subscriber
    rpc GetSubscriber(GetSubscriberRequest) returns (Subscriber) {
        option (google.api.http) = {
            get: "/api/subscribers/{subscriber_id}",
        };  
        option (google.api.method_signature) = "subscriber_id";
    };
}

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
        title: "Subscriber Service";
        description: "Manages subscribers for channel(s)"
		version: "v1";
		contact: {
			name: "Github <Gideon Kamau>";
			url: "https://github.com/gidyon/services/blob/master/api/proto/subscriber.proto";
			email: "gideonhacer@gmail.com";
        };
        license: {
			name: "MIT License";
			url: "https://github.com/gidyon/services/blob/master/LICENSE";
		};
    };
	schemes: HTTP;
	schemes: HTTPS;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
		  key: "bearer"
		  value: {
			type: TYPE_API_KEY
			in: IN_HEADER
			name: "Authorization"
			description: "Authentication token, prefixed by Bearer: Bearer <token>"
		  }
		}
	}
	security: {
		security_requirement: {
		  key: "bearer"
		}
	}
};