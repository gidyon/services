syntax = "proto3";

package gidyon.apis;

option go_package="github.com/gidyon/services/pkg/api/channel";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/api/field_behaviour.proto";
import "protoc-gen-swagger/options/annotations.proto";

message Channel {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "Channel"
			description: "A subscription network"
		}
	};

	string id = 1;
	string title = 2;
	string label = 3;
	string description = 4;
	string owner_id = 5;
	int32 create_time_seconds = 6;
	int32 subscribers = 7;
}

message CreateChannelRequest {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateChannelRequest"
			description: "Request to create a new channel"
			required: ["channel"]
		}
	};

	Channel channel = 1 [(google.api.field_behavior) = REQUIRED];
}

message CreateChannelResponse {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateChannelResponse"
			description: "Response after creating a channel"
		}
	};

	string id = 1;
}

message UpdateChannelRequest {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "UpdateChannelRequest"
			description: "Request to update a channel resource"
		}
	};

	string owner_id = 1 [(google.api.field_behavior) = OPTIONAL];
	Channel channel = 2 [(google.api.field_behavior) = REQUIRED];
}

message DeleteChannelRequest {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "DeleteChannelRequest"
			description: "Request to delete a channel resource"
		}
	};

	string id = 1 [(google.api.field_behavior) = REQUIRED];
	string owner_id = 2 [(google.api.field_behavior) = OPTIONAL];
}

message ListFilter {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ListFilter"
			description: "Filter for querying channels"
		}
	};

	repeated string labels = 1;
}

message ListChannelsRequest {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ListChannelsRequest"
			description: "Request to retrieve a collection of channel resources"
		}
	};

	string page_token = 1;
	int32 page_size = 2;
	ListFilter filter = 3;
}

message SearchChannelsRequest {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "SearchChannelsRequest"
			description: "Request to search for channels"
		}
	};

	string page_token = 1;
	int32 page_size = 2;
	string query = 3;
	ListFilter filter = 4;
}

message ListChannelsResponse {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ListChannelsResponse"
			description: "Response containing a collection of channel resource"
		}
	};

	repeated Channel channels = 1;
	string next_page_token = 2;
	int64 collection_count = 3;
}

message GetChannelRequest {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "GetChannelRequest"
			description: "Request to retrieve a channel resource"
			required: ["id"]
		}
	};

	string id = 1 [(google.api.field_behavior) = REQUIRED];
}

message SubscribersRequest {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "SubscribersRequest"
			description: "Request to increment or decrement subscribers for a channel or topic"
			required: ["id"]
		}
	};

	repeated string channel_names = 1 [(google.api.field_behavior) = REQUIRED];
}

// Manages channels and subscriptions
service ChannelAPI {
	// Creates a new subscriber channel
	rpc CreateChannel (CreateChannelRequest) returns (CreateChannelResponse) {
		option (google.api.http) = {
			post: "/api/channels",
			body: "*"
		};
	}

	// Updates an existing channel resource
	rpc UpdateChannel (UpdateChannelRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			patch: "/api/channels/{channel.id}",
			body: "*"
		};
	}

	// Removes a subscribers channel
	rpc DeleteChannel (DeleteChannelRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/api/channels/{id}"
		};
	}

	// Retrieves a collection of channels resource
	rpc ListChannels (ListChannelsRequest) returns (ListChannelsResponse) {
		option (google.api.http) = {
			get: "/api/channels"
		};
	}

	// Searches for channels
	rpc SearchChannels (SearchChannelsRequest) returns (ListChannelsResponse) {
		option (google.api.http) = {
			get: "/api/channels"
		};
	}

	// Retrieves a single channel resource
	rpc GetChannel (GetChannelRequest) returns (Channel) {
		option (google.api.http) = {
			get: "/api/channels/{id}"
		};
	}

	// Increment subscribers by one.
	rpc IncrementSubscribers (SubscribersRequest) returns (google.protobuf.Empty){
		option (google.api.http) = {
			get: "/api/channels/action:incrementsub"
			additional_bindings {
				post: "/api/channels:incrementSubscribers"
				body: "*"
			}
		};
	};

	// Decrement subscribers by one.
	rpc DecrementSubscribers (SubscribersRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			get: "/api/channels/action:decrementSub"
			additional_bindings {
				post: "/api/channels:decrementSubscribers"
				body: "*"
			}
		};
	};
}

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Channel Service";
		description: "Manages channels/topics for subscriptions"
		version: "v1";
		contact: {
			name: "Github <Gideon Kamau>";
			url: "https://github.com/gidyon/services/blob/master/api/proto/channel.proto";
			email: "gideonhacer@gmail.com";
		};
		license: {
			name: "MIT License";
			url: "https://github.com/gidyon/services/blob/master/LICENSE";
		};
	};
	schemes: HTTP;
	schemes: HTTPS;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
		  key: "bearer"
		  value: {
			type: TYPE_API_KEY
			in: IN_HEADER
			name: "Authorization"
			description: "Authentication token, prefixed by Bearer: Bearer <token>"
		  }
		}
	}
	security: {
		security_requirement: {
		  key: "bearer"
		}
	}
};