syntax = "proto3";

package gidyon.apis;

option go_package="github.com/gidyon/services/pkg/api/account";

import "google/protobuf/empty.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/api/field_behaviour.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "messaging/messaging.proto";

message Sender {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "Sender"
			description: "Options for email,sms,call"
		}
    };

    string email_sender = 1;
    string email_display_name = 2;
    string app_name = 3;
}
 
message Account {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "Account"
			description: "Account profile information"
		}
    };
    
    // Gender
    enum Gender {
        GENDER_UNSPECIFIED = 0;
        MALE = 1;
        FEMALE = 2;
    }

    string account_id = 1;
    string project_id = 2;
    string email = 3;
    string phone = 4;
    string device_token = 5;
    string names = 6;
    string birth_date = 7;
    Gender gender = 8;
    string nationality = 9;
    string profile_url = 11;
    string group = 13;
    string linked_accounts = 14;
    AccountState state = 15;
}

message PrivateAccount {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "PrivateAccount"
			description: "Contains account sensitive information such as password and security QA"
		}
    };
    
    string password = 1; 
    string confirm_password = 2;
    string security_question = 3;
    string security_answer = 4;
}

// AccountState 
enum AccountState {
    ACCOUNT_STATE_UNSPECIFIED = 0;
    BLOCKED = 1;
    ACTIVE = 2;
    INACTIVE = 3;
    DELETED = 4;
}

message SignInRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "SignInRequest"
			description: "Request to sign in to an account"
			required: ["username", "password"]
		}
    };
    
    string username = 1 [(google.api.field_behavior) = REQUIRED];
    string password = 2 [(google.api.field_behavior) = REQUIRED];
    string group = 3;
    string project_id = 4;
}


message SignInExternalRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "SignInExternalRequest"
			description: "Request to sign in using an external provider like Google, Facebook or Github"
			required: ["account", "auth_token"]
		}
    };
    
    Account account = 1 [(google.api.field_behavior) = REQUIRED];
    string auth_token = 2 [(google.api.field_behavior) = REQUIRED];
    string project_id = 3;
}

message RefreshSessionRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "RefreshSessionRequest"
			description: "Request to refresh session credential"
			required: ["refresh_token", "account_id"]
		}
    };
    
    string refresh_token = 1 [(google.api.field_behavior) = REQUIRED];
    string account_id = 2 [(google.api.field_behavior) = REQUIRED];
    string account_group = 3;
}

message SignInResponse {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
            title: "SignInResponse"
			description: "Response after signing in"
		}
    };

    string session_id = 1 [(google.api.field_behavior) = REQUIRED];
    string account_id = 2 [(google.api.field_behavior) = REQUIRED];
    string token = 3 [(google.api.field_behavior) = REQUIRED];
    string refresh_token = 4 [(google.api.field_behavior) = REQUIRED];
    string group = 5;
    AccountState state = 6;
}

message CreateAccountRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateAccountRequest"
			description: "Request to create an account"
			required: ["account"]
		}
    };
    
    Account account = 1 [(google.api.field_behavior) = REQUIRED];
    PrivateAccount private_account = 2 [(google.api.field_behavior) = OPTIONAL];
    bool notify = 3;
    bool update_only = 4;
    bool by_admin = 5;
    string admin_id = 6;
    string project_id = 7;
    Sender sender = 8;
}

message CreateAccountResponse {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
            title: "CreateAccountResponse"
			description: "Response after creating an account"
		}
    };
    
    string account_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message ActivateAccountRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ActivateAccountRequest"
			description: "Request to activate an account that was inactive"
			required: ["account_id", "token"]
		}
    };
    
    string account_id = 1 [(google.api.field_behavior) = REQUIRED];
    string token = 2 [(google.api.field_behavior) = REQUIRED];
}

message ActivateAccountResponse {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
            title: "ActivateAccountResponse"
			description: "Response after activating an account"
		}
	};
}

message UpdateAccountRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "UpdateAccountRequest"
			description: "Request to update an account"
			required: ["account"]
		}
    };
    
    Account account = 1 [(google.api.field_behavior) = REQUIRED];
}

message RequestChangePrivateAccountRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "RequestChangePrivateAccountRequest"
			description: "Request to change private account information"
			required: ["payload", "fallback_url", "send_method"]
		}
    };
    
    string payload = 1 [(google.api.field_behavior) = REQUIRED];
    string fallback_url = 2 [(google.api.field_behavior) = REQUIRED];
    gidyon.apis.SendMethod send_method = 3 [(google.api.field_behavior) = REQUIRED];
    Sender sender = 4;
}

message RequestChangePrivateAccountResponse {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
            title: "RequestChangePrivateAccountResponse"
			description: "Response after requesting for the change"
		}
    };
    
    string response_message = 1;
}

message UpdatePrivateAccountRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "UpdatePrivateAccountRequest"
			description: "Request to update account private information"
			required: ["account_id", "private_account", "change_token"]
		}
    };
    
    string account_id = 1 [(google.api.field_behavior) = REQUIRED];
    PrivateAccount private_account = 2 [(google.api.field_behavior) = REQUIRED];
    string change_token = 3 [(google.api.field_behavior) = REQUIRED];
}

message DeleteAccountRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "DeleteAccountRequest"
			description: "Request to delete an account"
			required: ["account_id"]
		}
    };
    
    string account_id = 1  [(google.api.field_behavior) = REQUIRED];
}

// AccountView
enum AccountView {
    FULL_VIEW = 0;
    LIST_VIEW = 1; // account_id, email, first name and last name
    SEARCH_VIEW = 2; // account_id, email, first name and last name
    BASIC_VIEW = 3; // account_id, email, first name and last name
}

message GetAccountRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "GetAccountRequest"
			description: "Request to retrieve an account"
			required: ["account_id"]
		}
    };
    
    string account_id = 1 [(google.api.field_behavior) = REQUIRED];
    AccountView view = 2 [(google.api.field_behavior) = OPTIONAL];
    bool priviledge = 3;
}

message BatchGetAccountsRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "BatchGetAccountsRequest"
			description: "Request to get multiple accounts"
			required: ["account_ids"]
		}
    };
    
    repeated string account_ids = 1 [(google.api.field_behavior) = REQUIRED];
}

message BatchGetAccountsResponse {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "BatchGetAccountsResponse"
		}
    };
    
    repeated Account accounts = 1;
}

message GetLinkedAccountsRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "GetLinkedAccountsRequest"
			description: "Request to retrive linked accounts for an account"
			required: ["account_id"]
		}
    };
    
    string account_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetLinkedAccountsResponse {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
            title: "GetLinkedAccountsResponse"
            description: "Response containing linked accounts"
		}
    };
    
    repeated Account accounts = 1;
}

message ExistAccountRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ExistAccountRequest"
			description: "Request to check if an account exists"
		}
    };
    
    string email = 1 [(google.api.field_behavior) = OPTIONAL];
    string phone = 2 [(google.api.field_behavior) = OPTIONAL];
    string project_id = 3 [(google.api.field_behavior) = OPTIONAL];
}

message ExistAccountResponse {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ExistAccountResponse"
		}
    };
    
    bool exists = 1;
    string account_id = 2;
    repeated string existing_fields = 3;
}

message Accounts {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "Accounts"
			description: "Collection of accounts"
		}
    };
    
    string next_page_token = 1 [(google.api.field_behavior) = OPTIONAL];
    repeated Account accounts = 2;
}

// UpdateOperation
enum UpdateOperation {
    UPDATE_OPERATION_INSPECIFIED = 0;
    UNDELETE = 1;
    DELETE = 2;
    UNBLOCK = 3;
    BLOCK = 4;
    CHANGE_GROUP = 5;
    ADMIN_ACTIVATE = 6;
}

message AdminUpdateAccountRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "AdminUpdateAccountRequest"
			description: "Request to update an account data by admininstrator"
			required: ["account_id", "admin_id", "update_operation"]
		}
    };
    
    string account_id = 1 [(google.api.field_behavior) = REQUIRED];
    string admin_id = 2 [(google.api.field_behavior) = REQUIRED];
    UpdateOperation update_operation = 3 [(google.api.field_behavior) = REQUIRED];
    string reason = 4 [(google.api.field_behavior) = OPTIONAL];
    repeated string payload = 5 [(google.api.field_behavior) = OPTIONAL];
    Sender sender = 6;
    bool notify = 7;
}

message Criteria {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "Criteria"
			description: "Filtering criteria for fetching collection of accounts"
		}
    };
    
    bool filter = 1;
    bool show_active_accounts = 2;
    bool show_inactive_accounts = 3;
    bool show_blocked_accounts = 4;
    bool show_males = 5;
    bool show_females = 6;
    bool filter_creation_date = 7;
    int64 created_from = 8;
    int64 created_until = 9;
    bool filter_account_groups = 10;
    repeated string groups = 11;
}

message ListAccountsRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ListAccountsRequest"
			description: "Request to retrieve collection of accounts"
		}
    };
    
    string page_token = 1;
    int32 page_size = 2;
    Criteria list_criteria = 3;
    AccountView view = 4;
    bool priviledge = 5;
}

message SearchAccountsRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "SearchAccountsRequest"
			description: "Request to search for accounts"
		}
    };
    
    string query = 1;
    string page_token = 2;
    int32 page_size = 3;
    bool search_linked_accounts = 4;
    Criteria search_criteria = 5;
    AccountView view = 6;
}

// Manages account activities
service AccountAPI {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_tag) = {
		description: "Account API description -- Managing user accounts!"
		external_docs: {
			url: "https://github.com/gidyon/services/blob/master";
			description: "Find more about accounts service";
		}
    };
    
    // Signs in a user into their account
    rpc SignIn (SignInRequest) returns (SignInResponse) {
        option (google.api.http) = {
            post: "/api/accounts/action/login"
            body: "*"
        };
        option (google.api.method_signature) = "username,group,password";
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			security: {}
		};
    };

     // Signs in a user using third parties like Google, Facebook, Twitter etc
     rpc SignInExternal (SignInExternalRequest) returns (SignInResponse) {
        option (google.api.http) = {
            post: "/api/accounts/action/login-external"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			security: {}
		};
    };

    // Fetch new JWT using refresh token and updates session
    rpc RefreshSession (RefreshSessionRequest) returns (SignInResponse) {
        option (google.api.http) = {
            get: "/api/accounts/action/refresh-session"
        };
        option (google.api.method_signature) = "account_id,token";
    };

    // Creates an account for a new user
    rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse) {
        option (google.api.http) = {
            post: "/api/accounts"
            body: "*"
        };
        option (google.api.method_signature) = "account,project_id";
    };

    // Activates an account to being active
    rpc ActivateAccount (ActivateAccountRequest) returns (ActivateAccountResponse) {
        option (google.api.http) = {
            get: "/api/accounts/{account_id}/action/activate-account"
        };
        option (google.api.method_signature) = "account_id,token";
    };

    // Updates a user account
    rpc UpdateAccount (UpdateAccountRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/api/accounts/{account.account_id}"
            body: "*"
        };
        option (google.api.method_signature) = "account_id,account";
    };

    // Request to change private account information
    rpc RequestChangePrivateAccount (RequestChangePrivateAccountRequest) returns (RequestChangePrivateAccountResponse) {
        option (google.api.http) = {
            get: "/api/accounts/action/request-change-private-account"
        };
        option (google.api.method_signature) = "payload,fallback_url";
    };

    // Updates a user private account information
    rpc UpdatePrivateAccount (UpdatePrivateAccountRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/api/accounts/{account_id}/action/update-private-account"
            body: "*"
        };
        option (google.api.method_signature) = "account_id,private_account";
    };

    // Deletes a user account
    rpc DeleteAccount (DeleteAccountRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/accounts/{account_id}"
        };
        option (google.api.method_signature) = "account_id";
    };

    // Retrieves a user account
    rpc GetAccount (GetAccountRequest) returns (Account) {
        option (google.api.http) = {
            get: "/api/accounts/{account_id}"
        };
        option (google.api.method_signature) = "account_id";
    };

    //  Retrieves multiple user accounts
    rpc BatchGetAccounts (BatchGetAccountsRequest) returns (BatchGetAccountsResponse) {
        option (google.api.http) = {
            get: "/api/accounts/action/batch-get"
        };
        option (google.api.method_signature) = "account_id";
    };

    //  Retrieves deeply linked accounts
    rpc GetLinkedAccounts (GetLinkedAccountsRequest) returns (GetLinkedAccountsResponse) {
        option (google.api.http) = {
            get: "/api/accounts/{account_id}/action/get-linked-accounts"
        };
        option (google.api.method_signature) = "account_id";
    };

    // Checks if an account exists
    rpc ExistAccount (ExistAccountRequest) returns (ExistAccountResponse) {
        option (google.api.http) = {
            get: "/api/accounts/action/exists"
        };
        option (google.api.method_signature) = "email,phone,huduma_id";
    };

    // Updates account
    rpc AdminUpdateAccount (AdminUpdateAccountRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/api/accounts/{account_id}/action/admin-update-account"
            body: "*"
        };
        option (google.api.method_signature) = "admin_id,account_id";
    };

    // Fetches collection of accounts
    rpc ListAccounts (ListAccountsRequest) returns (Accounts) {
        option (google.api.http) = {
            get: "/api/accounts"
        };
        option (google.api.method_signature) = "parent";
    };

    // Searches accounts and linked accounts
    rpc SearchAccounts (SearchAccountsRequest) returns (Accounts) {
        option (google.api.http) = {
            get: "/api/accounts/action/search"
        };
        option (google.api.method_signature) = "query";
    };
}

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
        title: "Accounts Service";
        description: "API for managing user account"
		version: "v1";
		contact: {
			name: "Github <Gideon Kamau>";
			url: "https://github.com/gidyon/services/blob/master/api/proto/account.proto";
			email: "gideonhacer@gmail.com";
        };
        license: {
			name: "MIT License";
			url: "https://github.com/gidyon/services/blob/master/LICENSE";
		};
    };
    schemes: HTTP;
	schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
    security_definitions: {
		security: {
		  key: "bearer"
		  value: {
			type: TYPE_API_KEY
			in: IN_HEADER
			name: "Authorization"
			description: "Authentication token, prefixed by Bearer: Bearer <token>"
		  }
		}
	  }
	  security: {
		security_requirement: {
		  key: "bearer"
		}
	  }
};