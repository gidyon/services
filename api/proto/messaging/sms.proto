syntax = "proto3";

package gidyon.apis;

option go_package="github.com/gidyon/services/pkg/api/messaging/sms";

import "google/protobuf/empty.proto";
import "google/api/field_behaviour.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

enum SmsProvider {
	ONFON = 0;
}

message SMS {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "SMS"
            description: "SMS is a text message that is to be sent to client(s)"
            required: ["destination_phones", "message"]
		}
    };
    
    repeated string destination_phones = 2 [(google.api.field_behavior) = REQUIRED];
    string keyword = 1;
    string message = 3 [(google.api.field_behavior) = REQUIRED];
}

message SendSMSRequest {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "SendSMSRequest"
            description: "Request to send sms to clients"
            required: ["sms"]
		}
	};
	
	SMS sms = 1;
	
	message Cookie {
		string name = 1;
		string value = 2;
	}

	message SMSAuth {
		// [sms_url, sender_id, api_key, client_id, auth_token, access_key, cookies]
		string api_url = 1;
		string sender_id = 2;
		string api_key = 3;
		string client_id = 4;
		string auth_token = 5;
		string access_key = 6;
		repeated Cookie cookies = 7;
	}

	SMSAuth auth = 2;
	SmsProvider provider = 3;
}

// Sends SMS to destination phone(s)
service SMSAPI {
    // Send an sms to its destination(s)
    rpc SendSMS (SendSMSRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/sms:sendSMS"
        };
    };
}

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
        title: "SMS API";
        description: "Send text messages to client(s)"
		version: "v1";
		contact: {
			name: "Github <Gideon Kamau>";
			url: "https://github.com/gidyon/services/blob/master/api/proto/messaging/sms.proto";
			email: "gideonhacer@gmail.com";
        };
        license: {
			name: "MIT License";
			url: "https://github.com/gidyon/services/blob/master/LICENSE";
		};
    };
	schemes: HTTP;
	schemes: HTTPS;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
		  key: "bearer"
		  value: {
			type: TYPE_API_KEY
			in: IN_HEADER
			name: "Authorization"
			description: "Authentication token, prefixed by Bearer: Bearer <token>"
		  }
		}
	}
	security: {
		security_requirement: {
		  key: "bearer"
		}
	}
};