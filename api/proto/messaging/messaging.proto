syntax = "proto3";

package gidyon.apis;

option go_package="github.com/gidyon/services/pkg/api/messaging";

import "google/protobuf/empty.proto";
import "google/api/field_behaviour.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "sms.proto";
import "emailing.proto";

// MessageType
enum MessageType {
    ALL = 0;
    PROMOTIONAL = 1;
    REMINDER = 2;
    WARNING = 3;
    ALERT = 4;
    INFO = 5;
}

// SendMethod
enum SendMethod {
    SEND_METHOD_UNSPECIFIED = 0;
    EMAIL = 1;
    SMSV2 = 2;
    CALL = 3;
    PUSH = 4;
}

message Message {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "Message"
			description: "Message to be sent"
		}
    };

    string message_id = 1;
    string user_id = 2;
    string title = 3;
    string data = 4;
    string link = 5;
    int64 create_time_seconds = 6;
    bool seen = 7;
    bool save = 9;
    MessageType type = 10;
    repeated SendMethod send_methods = 11;
    map<string, string> details = 12;
}

message BroadCastMessageRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "BroadCastMessageRequest"
            description: "Request to broadcast message to clients"
            required: ["channels", "message"]
		}
    };

    repeated string channels = 1 [(google.api.field_behavior) = REQUIRED];
    Message message = 2 [(google.api.field_behavior) = REQUIRED];
    gidyon.apis.SendSMSRequest.SMSAuth sms_auth = 3;
    gidyon.apis.EmailSender sender = 4;
}

message SendMessageRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "SendMessageRequest"
            description: "Request to send a message to clients"
            required: ["channels", "message"]
		}
    };

    Message message = 1 [(google.api.field_behavior) = REQUIRED];
    gidyon.apis.SendSMSRequest.SMSAuth sms_auth = 2;
    gidyon.apis.EmailSender sender = 3;
}

message SendMessageResponse {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "SendMessageResponse"
			description: "Response after sending message containing the message id"
		}
    };

    string message_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message ListMessagesFilter {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ListMessagesFilter"
			description: "Filter criteria for filtering messages"
		}
    };

    string user_id = 1;
    repeated MessageType type_filters = 2;
}

message ListMessagesRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ListMessagesRequest"
			description: "Request to retrieve a collection of messages"
		}
    };

    string page_token = 1;
    int32 page_size = 2;
    ListMessagesFilter filter = 3;
}

message Messages {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "Messages"
			description: "A collection of messages"
		}
    };

    repeated Message messages = 1;
    string next_page_token = 2;
    int64 collection_count = 3;
}

message MessageRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "MessageRequest"
            description: "Request to perform an action to a message resource"
            required: ["user_id"]
		}
    };

    string user_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message NewMessagesCount {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "NewMessagesCount"
            description: "Contains count of new messages"
		}
    };

    int32 count = 1;
}

// API for sending, saving and retrieving messages
service Messaging {
    // Broadcasts a message
    rpc BroadCastMessage (BroadCastMessageRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/messaging/action:broadcast"
            body: "*"
        };
    };

    // Sends message to a single destination
    rpc SendMessage (SendMessageRequest) returns (SendMessageResponse) {
        option (google.api.http) = {
            post: "/api/messaging/action:send"
            body: "*"
        };
    };

    // Retrieves a collection of messages
    rpc ListMessages (ListMessagesRequest) returns (Messages) {
        option (google.api.http) = {
            get: "/api/messaging"
            additional_bindings {
                post: "/api/messaging/action:list"
                body: "*"
            }
        };
    };

    // Updates unread messages statuses to read
    rpc ReadAll (MessageRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/api/messaging/users/{user_id}:readall"
        };
    };

    // Fetches count of new messages
    rpc GetNewMessagesCount (MessageRequest) returns (NewMessagesCount) {
        option (google.api.http) = {
            get: "/api/messaging/users/{user_id}:newcount"
        };
    };
}

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
        title: "Messaging API";
        description: "Sends, saves and retrives notification messages"
		version: "v1";
		contact: {
			name: "Github <Gideon Kamau>";
			url: "https://github.com/gidyon/services/blob/master/api/proto/messaging/messaging.proto";
			email: "gideonhacer@gmail.com";
        };
        license: {
			name: "MIT License";
			url: "https://github.com/gidyon/services/blob/master/LICENSE";
		};
    };
	schemes: HTTP;
	schemes: HTTPS;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
		  key: "bearer"
		  value: {
			type: TYPE_API_KEY
			in: IN_HEADER
			name: "Authorization"
			description: "Authentication token, prefixed by Bearer: Bearer <token>"
		  }
		}
	}
	security: {
		security_requirement: {
		  key: "bearer"
		}
	}
};