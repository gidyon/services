{
  "swagger": "2.0",
  "info": {
    "title": "Accounts Service",
    "description": "API for managing user account",
    "version": "v1",
    "contact": {
      "name": "Github \u003cGideon Kamau\u003e",
      "url": "https://github.com/gidyon/services/blob/master/api/proto/account.proto",
      "email": "gideonhacer@gmail.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://github.com/gidyon/services/blob/master/LICENSE"
    }
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/accounts": {
      "get": {
        "summary": "Fetches collection of accounts",
        "operationId": "AccountAPI_ListAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisAccounts"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "listCriteria.filter",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "listCriteria.showActiveAccounts",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "listCriteria.showInactiveAccounts",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "listCriteria.showBlockedAccounts",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "listCriteria.showMales",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "listCriteria.showFemales",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "listCriteria.filterCreationDate",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "listCriteria.createdFrom",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "listCriteria.createdUntil",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "listCriteria.filterAccountGroups",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "listCriteria.groups",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FULL_VIEW",
              "LIST_VIEW",
              "SEARCH_VIEW",
              "BASIC_VIEW"
            ],
            "default": "FULL_VIEW"
          },
          {
            "name": "priviledge",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      },
      "post": {
        "summary": "Creates an account for a new user",
        "operationId": "AccountAPI_CreateAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisCreateAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisCreateAccountRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts/action/batch-get": {
      "get": {
        "summary": "Retrieves multiple user accounts",
        "operationId": "AccountAPI_BatchGetAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisBatchGetAccountsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accountIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts/action/exists": {
      "get": {
        "summary": "Checks if an account exists",
        "operationId": "AccountAPI_ExistAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisExistAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "phone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts/action/login": {
      "post": {
        "summary": "Signs in a user into their account",
        "operationId": "AccountAPI_SignIn",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisSignInResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisSignInRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ],
        "security": []
      }
    },
    "/api/accounts/action/login-external": {
      "post": {
        "summary": "Signs in a user using third parties like Google, Facebook, Twitter etc",
        "operationId": "AccountAPI_SignInExternal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisSignInResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisSignInExternalRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ],
        "security": []
      }
    },
    "/api/accounts/action/refresh-session": {
      "get": {
        "summary": "Fetch new JWT using refresh token and updates session",
        "operationId": "AccountAPI_RefreshSession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisSignInResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "refreshToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountGroup",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts/action/request-change-private-account": {
      "get": {
        "summary": "Request to change private account information",
        "operationId": "AccountAPI_RequestChangePrivateAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisRequestChangePrivateAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "payload",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fallbackUrl",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sendMethod",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SEND_METHOD_UNSPECIFIED",
              "EMAIL",
              "SMSV2",
              "CALL",
              "PUSH"
            ],
            "default": "SEND_METHOD_UNSPECIFIED"
          },
          {
            "name": "sender.emailSender",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sender.displayName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sender.appName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "smsAuth.apiUrl",
            "description": "[sms_url, sender_id, api_key, client_id, auth_token, access_key, cookies].",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "smsAuth.senderId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "smsAuth.apiKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "smsAuth.clientId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "smsAuth.authToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "smsAuth.accessKey",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts/action/request-otp": {
      "post": {
        "summary": "Request to sign in using OTP",
        "operationId": "AccountAPI_RequestOTP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisRequestOTPRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts/action/search": {
      "get": {
        "summary": "Searches accounts and linked accounts",
        "operationId": "AccountAPI_SearchAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisAccounts"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "searchLinkedAccounts",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "searchCriteria.filter",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "searchCriteria.showActiveAccounts",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "searchCriteria.showInactiveAccounts",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "searchCriteria.showBlockedAccounts",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "searchCriteria.showMales",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "searchCriteria.showFemales",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "searchCriteria.filterCreationDate",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "searchCriteria.createdFrom",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "searchCriteria.createdUntil",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "searchCriteria.filterAccountGroups",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "searchCriteria.groups",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FULL_VIEW",
              "LIST_VIEW",
              "SEARCH_VIEW",
              "BASIC_VIEW"
            ],
            "default": "FULL_VIEW"
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts/action/sign-in-otp": {
      "post": {
        "summary": "Sign in using provided OTPs",
        "operationId": "AccountAPI_SignInOTP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisSignInResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisSignInOTPRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts/action/update-private-account": {
      "patch": {
        "summary": "Updates a user private account information while not logged in to the account",
        "operationId": "AccountAPI_UpdatePrivateAccountExternal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisUpdatePrivateAccountExternalRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts/{account.accountId}": {
      "patch": {
        "summary": "Updates a user account",
        "operationId": "AccountAPI_UpdateAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "account.accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisUpdateAccountRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts/{accountId}": {
      "get": {
        "summary": "Retrieves a user account",
        "operationId": "AccountAPI_GetAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisAccount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FULL_VIEW",
              "LIST_VIEW",
              "SEARCH_VIEW",
              "BASIC_VIEW"
            ],
            "default": "FULL_VIEW"
          },
          {
            "name": "priviledge",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      },
      "delete": {
        "summary": "Deletes a user account",
        "operationId": "AccountAPI_DeleteAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts/{accountId}/action/activate-account": {
      "get": {
        "summary": "Activates an account to being active",
        "operationId": "AccountAPI_ActivateAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisActivateAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts/{accountId}/action/admin-update-account": {
      "patch": {
        "summary": "Updates account",
        "operationId": "AccountAPI_AdminUpdateAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisAdminUpdateAccountRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts/{accountId}/action/get-linked-accounts": {
      "get": {
        "summary": "Retrieves deeply linked accounts",
        "operationId": "AccountAPI_GetLinkedAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisGetLinkedAccountsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts/{accountId}/action/update-private-account": {
      "patch": {
        "summary": "Updates a user private account information",
        "operationId": "AccountAPI_UpdatePrivateAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisUpdatePrivateAccountRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts:activateAccount": {
      "post": {
        "summary": "Activates an account to being active",
        "operationId": "AccountAPI_ActivateAccount2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisActivateAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisActivateAccountRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts:adminUpdateAccount": {
      "post": {
        "summary": "Updates account",
        "operationId": "AccountAPI_AdminUpdateAccount2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisAdminUpdateAccountRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts:batchGetAccounts": {
      "post": {
        "summary": "Retrieves multiple user accounts",
        "operationId": "AccountAPI_BatchGetAccounts2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisBatchGetAccountsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisBatchGetAccountsRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts:existAccount": {
      "post": {
        "summary": "Checks if an account exists",
        "operationId": "AccountAPI_ExistAccount2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisExistAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisExistAccountRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts:getLinkedAccounts": {
      "post": {
        "summary": "Retrieves deeply linked accounts",
        "operationId": "AccountAPI_GetLinkedAccounts2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisGetLinkedAccountsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisGetLinkedAccountsRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts:listAccounts": {
      "post": {
        "summary": "Fetches collection of accounts",
        "operationId": "AccountAPI_ListAccounts2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisAccounts"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisListAccountsRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts:refreshSession": {
      "post": {
        "summary": "Fetch new JWT using refresh token and updates session",
        "operationId": "AccountAPI_RefreshSession2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisSignInResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisRefreshSessionRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts:requestChangePrivateAccount": {
      "post": {
        "summary": "Request to change private account information",
        "operationId": "AccountAPI_RequestChangePrivateAccount2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisRequestChangePrivateAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisRequestChangePrivateAccountRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts:requestOTP": {
      "post": {
        "summary": "Request to sign in using OTP",
        "operationId": "AccountAPI_RequestOTP2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisRequestOTPRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts:searchAccounts": {
      "post": {
        "summary": "Searches accounts and linked accounts",
        "operationId": "AccountAPI_SearchAccounts2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisAccounts"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisSearchAccountsRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts:signIn": {
      "post": {
        "summary": "Signs in a user into their account",
        "operationId": "AccountAPI_SignIn2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisSignInResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisSignInRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ],
        "security": []
      }
    },
    "/api/accounts:signInExternal": {
      "post": {
        "summary": "Signs in a user using third parties like Google, Facebook, Twitter etc",
        "operationId": "AccountAPI_SignInExternal2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisSignInResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisSignInExternalRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ],
        "security": []
      }
    },
    "/api/accounts:signInOTP": {
      "post": {
        "summary": "Sign in using provided OTPs",
        "operationId": "AccountAPI_SignInOTP2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apisSignInResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisSignInOTPRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts:updatePrivateAccount": {
      "post": {
        "summary": "Updates a user private account information",
        "operationId": "AccountAPI_UpdatePrivateAccount2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisUpdatePrivateAccountRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    },
    "/api/accounts:updatePrivateAccountExternal": {
      "post": {
        "summary": "Updates a user private account information while not logged in to the account",
        "operationId": "AccountAPI_UpdatePrivateAccountExternal2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apisUpdatePrivateAccountExternalRequest"
            }
          }
        ],
        "tags": [
          "AccountAPI"
        ]
      }
    }
  },
  "definitions": {
    "AccountGender": {
      "type": "string",
      "enum": [
        "GENDER_UNSPECIFIED",
        "MALE",
        "FEMALE"
      ],
      "default": "GENDER_UNSPECIFIED",
      "title": "Gender"
    },
    "SendSMSRequestCookie": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "SendSMSRequestSMSAuth": {
      "type": "object",
      "properties": {
        "apiUrl": {
          "type": "string",
          "title": "[sms_url, sender_id, api_key, client_id, auth_token, access_key, cookies]"
        },
        "senderId": {
          "type": "string"
        },
        "apiKey": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "authToken": {
          "type": "string"
        },
        "accessKey": {
          "type": "string"
        },
        "cookies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SendSMSRequestCookie"
          }
        }
      }
    },
    "apisAccount": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "deviceToken": {
          "type": "string"
        },
        "names": {
          "type": "string"
        },
        "birthDate": {
          "type": "string"
        },
        "gender": {
          "$ref": "#/definitions/AccountGender"
        },
        "nationality": {
          "type": "string"
        },
        "profileUrl": {
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "linkedAccounts": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/apisAccountState"
        },
        "secondaryGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Account profile information",
      "title": "Account"
    },
    "apisAccountState": {
      "type": "string",
      "enum": [
        "ACCOUNT_STATE_UNSPECIFIED",
        "BLOCKED",
        "ACTIVE",
        "INACTIVE",
        "DELETED"
      ],
      "default": "ACCOUNT_STATE_UNSPECIFIED",
      "title": "AccountState"
    },
    "apisAccountView": {
      "type": "string",
      "enum": [
        "FULL_VIEW",
        "LIST_VIEW",
        "SEARCH_VIEW",
        "BASIC_VIEW"
      ],
      "default": "FULL_VIEW",
      "title": "AccountView"
    },
    "apisAccounts": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string"
        },
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apisAccount"
          }
        }
      },
      "description": "Collection of accounts",
      "title": "Accounts"
    },
    "apisActivateAccountRequest": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      },
      "description": "Request to activate an account that was inactive",
      "title": "ActivateAccountRequest",
      "required": [
        "account_id",
        "token"
      ]
    },
    "apisActivateAccountResponse": {
      "type": "object",
      "description": "Response after activating an account",
      "title": "ActivateAccountResponse"
    },
    "apisAdminUpdateAccountRequest": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "adminId": {
          "type": "string"
        },
        "updateOperation": {
          "$ref": "#/definitions/apisUpdateOperation"
        },
        "reason": {
          "type": "string"
        },
        "payload": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "notify": {
          "type": "boolean"
        },
        "sendMethod": {
          "$ref": "#/definitions/apisSendMethod"
        },
        "sender": {
          "$ref": "#/definitions/apisEmailSender"
        },
        "smsAuth": {
          "$ref": "#/definitions/SendSMSRequestSMSAuth"
        }
      },
      "description": "Request to update an account data by admininstrator",
      "title": "AdminUpdateAccountRequest",
      "required": [
        "account_id",
        "admin_id",
        "update_operation"
      ]
    },
    "apisBatchGetAccountsRequest": {
      "type": "object",
      "properties": {
        "accountIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Request to get multiple accounts",
      "title": "BatchGetAccountsRequest",
      "required": [
        "account_ids"
      ]
    },
    "apisBatchGetAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apisAccount"
          }
        }
      },
      "title": "BatchGetAccountsResponse"
    },
    "apisCreateAccountRequest": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/apisAccount"
        },
        "privateAccount": {
          "$ref": "#/definitions/apisPrivateAccount"
        },
        "notify": {
          "type": "boolean"
        },
        "updateOnly": {
          "type": "boolean"
        },
        "byAdmin": {
          "type": "boolean"
        },
        "adminId": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "notificationMethod": {
          "$ref": "#/definitions/apisSendMethod"
        },
        "sender": {
          "$ref": "#/definitions/apisEmailSender"
        },
        "smsAuth": {
          "$ref": "#/definitions/SendSMSRequestSMSAuth"
        }
      },
      "description": "Request to create an account",
      "title": "CreateAccountRequest",
      "required": [
        "account"
      ]
    },
    "apisCreateAccountResponse": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        }
      },
      "description": "Response after creating an account",
      "title": "CreateAccountResponse"
    },
    "apisCriteria": {
      "type": "object",
      "properties": {
        "filter": {
          "type": "boolean"
        },
        "showActiveAccounts": {
          "type": "boolean"
        },
        "showInactiveAccounts": {
          "type": "boolean"
        },
        "showBlockedAccounts": {
          "type": "boolean"
        },
        "showMales": {
          "type": "boolean"
        },
        "showFemales": {
          "type": "boolean"
        },
        "filterCreationDate": {
          "type": "boolean"
        },
        "createdFrom": {
          "type": "string",
          "format": "int64"
        },
        "createdUntil": {
          "type": "string",
          "format": "int64"
        },
        "filterAccountGroups": {
          "type": "boolean"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Filtering criteria for fetching collection of accounts",
      "title": "Criteria"
    },
    "apisEmailSender": {
      "type": "object",
      "properties": {
        "emailSender": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "appName": {
          "type": "string"
        }
      },
      "description": "Sender information for email",
      "title": "EmailSender"
    },
    "apisExistAccountRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        }
      },
      "description": "Request to check if an account exists",
      "title": "ExistAccountRequest"
    },
    "apisExistAccountResponse": {
      "type": "object",
      "properties": {
        "exists": {
          "type": "boolean"
        },
        "accountId": {
          "type": "string"
        },
        "existingFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "ExistAccountResponse"
    },
    "apisGetLinkedAccountsRequest": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        }
      },
      "description": "Request to retrive linked accounts for an account",
      "title": "GetLinkedAccountsRequest",
      "required": [
        "account_id"
      ]
    },
    "apisGetLinkedAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apisAccount"
          }
        }
      },
      "description": "Response containing linked accounts",
      "title": "GetLinkedAccountsResponse"
    },
    "apisListAccountsRequest": {
      "type": "object",
      "properties": {
        "pageToken": {
          "type": "string"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "listCriteria": {
          "$ref": "#/definitions/apisCriteria"
        },
        "view": {
          "$ref": "#/definitions/apisAccountView"
        },
        "priviledge": {
          "type": "boolean"
        }
      },
      "description": "Request to retrieve collection of accounts",
      "title": "ListAccountsRequest"
    },
    "apisPrivateAccount": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        },
        "confirmPassword": {
          "type": "string"
        },
        "securityQuestion": {
          "type": "string"
        },
        "securityAnswer": {
          "type": "string"
        }
      },
      "description": "Contains account sensitive information such as password and security QA",
      "title": "PrivateAccount"
    },
    "apisRefreshSessionRequest": {
      "type": "object",
      "properties": {
        "refreshToken": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "accountGroup": {
          "type": "string"
        }
      },
      "description": "Request to refresh session credential",
      "title": "RefreshSessionRequest",
      "required": [
        "refresh_token",
        "account_id"
      ]
    },
    "apisRequestChangePrivateAccountRequest": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "string"
        },
        "fallbackUrl": {
          "type": "string"
        },
        "sendMethod": {
          "$ref": "#/definitions/apisSendMethod"
        },
        "sender": {
          "$ref": "#/definitions/apisEmailSender"
        },
        "smsAuth": {
          "$ref": "#/definitions/SendSMSRequestSMSAuth"
        }
      },
      "description": "Request to change private account information",
      "title": "RequestChangePrivateAccountRequest",
      "required": [
        "payload",
        "fallback_url",
        "send_method"
      ]
    },
    "apisRequestChangePrivateAccountResponse": {
      "type": "object",
      "properties": {
        "responseMessage": {
          "type": "string"
        },
        "jwt": {
          "type": "string"
        }
      },
      "description": "Response after requesting for the change",
      "title": "RequestChangePrivateAccountResponse"
    },
    "apisRequestOTPRequest": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string"
        }
      },
      "description": "Request request to sign in",
      "title": "RequestOTPRequest"
    },
    "apisSearchAccountsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        },
        "pageToken": {
          "type": "string"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "searchLinkedAccounts": {
          "type": "boolean"
        },
        "searchCriteria": {
          "$ref": "#/definitions/apisCriteria"
        },
        "view": {
          "$ref": "#/definitions/apisAccountView"
        }
      },
      "description": "Request to search for accounts",
      "title": "SearchAccountsRequest"
    },
    "apisSendMethod": {
      "type": "string",
      "enum": [
        "SEND_METHOD_UNSPECIFIED",
        "EMAIL",
        "SMSV2",
        "CALL",
        "PUSH"
      ],
      "default": "SEND_METHOD_UNSPECIFIED",
      "title": "SendMethod"
    },
    "apisSignInExternalRequest": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/apisAccount"
        },
        "authToken": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        }
      },
      "description": "Request to sign in using an external provider like Google, Facebook or Github",
      "title": "SignInExternalRequest",
      "required": [
        "account",
        "auth_token"
      ]
    },
    "apisSignInOTPRequest": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string"
        },
        "otp": {
          "type": "string"
        }
      },
      "description": "Request to sign in using OTP",
      "title": "SignInOTPRequest"
    },
    "apisSignInRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        }
      },
      "description": "Request to sign in to an account",
      "title": "SignInRequest",
      "required": [
        "username",
        "password"
      ]
    },
    "apisSignInResponse": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/apisAccountState"
        },
        "secondaryGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Response after signing in",
      "title": "SignInResponse"
    },
    "apisUpdateAccountRequest": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/apisAccount"
        }
      },
      "description": "Request to update an account",
      "title": "UpdateAccountRequest",
      "required": [
        "account"
      ]
    },
    "apisUpdateOperation": {
      "type": "string",
      "enum": [
        "UPDATE_OPERATION_INSPECIFIED",
        "UNDELETE",
        "DELETE",
        "UNBLOCK",
        "BLOCK",
        "CHANGE_GROUP",
        "ADMIN_ACTIVATE"
      ],
      "default": "UPDATE_OPERATION_INSPECIFIED",
      "title": "UpdateOperation"
    },
    "apisUpdatePrivateAccountExternalRequest": {
      "type": "object",
      "properties": {
        "jwt": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "privateAccount": {
          "$ref": "#/definitions/apisPrivateAccount"
        },
        "changeToken": {
          "type": "string"
        }
      },
      "description": "Request to update account private information from external source",
      "title": "UpdatePrivateAccountExternalRequest",
      "required": [
        "account_id",
        "private_account",
        "change_token"
      ]
    },
    "apisUpdatePrivateAccountRequest": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "privateAccount": {
          "$ref": "#/definitions/apisPrivateAccount"
        },
        "changeToken": {
          "type": "string"
        }
      },
      "description": "Request to update account private information",
      "title": "UpdatePrivateAccountRequest",
      "required": [
        "account_id",
        "private_account",
        "change_token"
      ]
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "description": "Authentication token, prefixed by Bearer: Bearer \u003ctoken\u003e",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ]
}
