// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package longrunning

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// OperationAPIClient is the client API for OperationAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperationAPIClient interface {
	// Creates a long running operation
	CreateOperation(ctx context.Context, in *CreateOperationRequest, opts ...grpc.CallOption) (*Operation, error)
	// Updates a long running operation
	UpdateOperation(ctx context.Context, in *UpdateOperationRequest, opts ...grpc.CallOption) (*Operation, error)
	// Deletes a long running operation
	DeleteOperation(ctx context.Context, in *DeleteOperationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Retrieves collection of long running operations
	ListOperations(ctx context.Context, in *ListOperationsRequest, opts ...grpc.CallOption) (*ListOperationsResponse, error)
	// Retrives a single long running operation
	GetOperation(ctx context.Context, in *GetOperationRequest, opts ...grpc.CallOption) (*Operation, error)
}

type operationAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewOperationAPIClient(cc grpc.ClientConnInterface) OperationAPIClient {
	return &operationAPIClient{cc}
}

func (c *operationAPIClient) CreateOperation(ctx context.Context, in *CreateOperationRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/gidyon.apis.OperationAPI/CreateOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationAPIClient) UpdateOperation(ctx context.Context, in *UpdateOperationRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/gidyon.apis.OperationAPI/UpdateOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationAPIClient) DeleteOperation(ctx context.Context, in *DeleteOperationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.apis.OperationAPI/DeleteOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationAPIClient) ListOperations(ctx context.Context, in *ListOperationsRequest, opts ...grpc.CallOption) (*ListOperationsResponse, error) {
	out := new(ListOperationsResponse)
	err := c.cc.Invoke(ctx, "/gidyon.apis.OperationAPI/ListOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationAPIClient) GetOperation(ctx context.Context, in *GetOperationRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/gidyon.apis.OperationAPI/GetOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperationAPIServer is the server API for OperationAPI service.
// All implementations must embed UnimplementedOperationAPIServer
// for forward compatibility
type OperationAPIServer interface {
	// Creates a long running operation
	CreateOperation(context.Context, *CreateOperationRequest) (*Operation, error)
	// Updates a long running operation
	UpdateOperation(context.Context, *UpdateOperationRequest) (*Operation, error)
	// Deletes a long running operation
	DeleteOperation(context.Context, *DeleteOperationRequest) (*empty.Empty, error)
	// Retrieves collection of long running operations
	ListOperations(context.Context, *ListOperationsRequest) (*ListOperationsResponse, error)
	// Retrives a single long running operation
	GetOperation(context.Context, *GetOperationRequest) (*Operation, error)
	mustEmbedUnimplementedOperationAPIServer()
}

// UnimplementedOperationAPIServer must be embedded to have forward compatible implementations.
type UnimplementedOperationAPIServer struct {
}

func (UnimplementedOperationAPIServer) CreateOperation(context.Context, *CreateOperationRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOperation not implemented")
}
func (UnimplementedOperationAPIServer) UpdateOperation(context.Context, *UpdateOperationRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOperation not implemented")
}
func (UnimplementedOperationAPIServer) DeleteOperation(context.Context, *DeleteOperationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOperation not implemented")
}
func (UnimplementedOperationAPIServer) ListOperations(context.Context, *ListOperationsRequest) (*ListOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (UnimplementedOperationAPIServer) GetOperation(context.Context, *GetOperationRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperation not implemented")
}
func (UnimplementedOperationAPIServer) mustEmbedUnimplementedOperationAPIServer() {}

// UnsafeOperationAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperationAPIServer will
// result in compilation errors.
type UnsafeOperationAPIServer interface {
	mustEmbedUnimplementedOperationAPIServer()
}

func RegisterOperationAPIServer(s grpc.ServiceRegistrar, srv OperationAPIServer) {
	s.RegisterService(&_OperationAPI_serviceDesc, srv)
}

func _OperationAPI_CreateOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationAPIServer).CreateOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.apis.OperationAPI/CreateOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationAPIServer).CreateOperation(ctx, req.(*CreateOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationAPI_UpdateOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationAPIServer).UpdateOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.apis.OperationAPI/UpdateOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationAPIServer).UpdateOperation(ctx, req.(*UpdateOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationAPI_DeleteOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationAPIServer).DeleteOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.apis.OperationAPI/DeleteOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationAPIServer).DeleteOperation(ctx, req.(*DeleteOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationAPI_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationAPIServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.apis.OperationAPI/ListOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationAPIServer).ListOperations(ctx, req.(*ListOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationAPI_GetOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationAPIServer).GetOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.apis.OperationAPI/GetOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationAPIServer).GetOperation(ctx, req.(*GetOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OperationAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gidyon.apis.OperationAPI",
	HandlerType: (*OperationAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOperation",
			Handler:    _OperationAPI_CreateOperation_Handler,
		},
		{
			MethodName: "UpdateOperation",
			Handler:    _OperationAPI_UpdateOperation_Handler,
		},
		{
			MethodName: "DeleteOperation",
			Handler:    _OperationAPI_DeleteOperation_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _OperationAPI_ListOperations_Handler,
		},
		{
			MethodName: "GetOperation",
			Handler:    _OperationAPI_GetOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "longrunning.proto",
}
