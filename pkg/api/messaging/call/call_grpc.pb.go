// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package call

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CallAPIClient is the client API for CallAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallAPIClient interface {
	// Calls a user programmatically
	Call(ctx context.Context, in *CallPayload, opts ...grpc.CallOption) (*empty.Empty, error)
}

type callAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCallAPIClient(cc grpc.ClientConnInterface) CallAPIClient {
	return &callAPIClient{cc}
}

func (c *callAPIClient) Call(ctx context.Context, in *CallPayload, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.apis.CallAPI/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallAPIServer is the server API for CallAPI service.
// All implementations must embed UnimplementedCallAPIServer
// for forward compatibility
type CallAPIServer interface {
	// Calls a user programmatically
	Call(context.Context, *CallPayload) (*empty.Empty, error)
	mustEmbedUnimplementedCallAPIServer()
}

// UnimplementedCallAPIServer must be embedded to have forward compatible implementations.
type UnimplementedCallAPIServer struct {
}

func (UnimplementedCallAPIServer) Call(context.Context, *CallPayload) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedCallAPIServer) mustEmbedUnimplementedCallAPIServer() {}

// UnsafeCallAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallAPIServer will
// result in compilation errors.
type UnsafeCallAPIServer interface {
	mustEmbedUnimplementedCallAPIServer()
}

func RegisterCallAPIServer(s grpc.ServiceRegistrar, srv CallAPIServer) {
	s.RegisterService(&_CallAPI_serviceDesc, srv)
}

func _CallAPI_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallAPIServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.apis.CallAPI/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallAPIServer).Call(ctx, req.(*CallPayload))
	}
	return interceptor(ctx, in, info, handler)
}

var _CallAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gidyon.apis.CallAPI",
	HandlerType: (*CallAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _CallAPI_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "call.proto",
}
