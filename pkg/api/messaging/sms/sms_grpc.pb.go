// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sms

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SMSAPIClient is the client API for SMSAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SMSAPIClient interface {
	// Send an sms to its destination(s)
	SendSMS(ctx context.Context, in *SendSMSRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Create a sender id credential
	CreateSenderCredential(ctx context.Context, in *CreateSenderCredentialsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get a sender id credential
	GetSenderCredential(ctx context.Context, in *GetSenderCredentialRequest, opts ...grpc.CallOption) (*SenderCredetial, error)
}

type sMSAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSMSAPIClient(cc grpc.ClientConnInterface) SMSAPIClient {
	return &sMSAPIClient{cc}
}

func (c *sMSAPIClient) SendSMS(ctx context.Context, in *SendSMSRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.apis.SMSAPI/SendSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSAPIClient) CreateSenderCredential(ctx context.Context, in *CreateSenderCredentialsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.apis.SMSAPI/CreateSenderCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSAPIClient) GetSenderCredential(ctx context.Context, in *GetSenderCredentialRequest, opts ...grpc.CallOption) (*SenderCredetial, error) {
	out := new(SenderCredetial)
	err := c.cc.Invoke(ctx, "/gidyon.apis.SMSAPI/GetSenderCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SMSAPIServer is the server API for SMSAPI service.
// All implementations must embed UnimplementedSMSAPIServer
// for forward compatibility
type SMSAPIServer interface {
	// Send an sms to its destination(s)
	SendSMS(context.Context, *SendSMSRequest) (*empty.Empty, error)
	// Create a sender id credential
	CreateSenderCredential(context.Context, *CreateSenderCredentialsRequest) (*empty.Empty, error)
	// Get a sender id credential
	GetSenderCredential(context.Context, *GetSenderCredentialRequest) (*SenderCredetial, error)
	mustEmbedUnimplementedSMSAPIServer()
}

// UnimplementedSMSAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSMSAPIServer struct {
}

func (UnimplementedSMSAPIServer) SendSMS(context.Context, *SendSMSRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSMS not implemented")
}
func (UnimplementedSMSAPIServer) CreateSenderCredential(context.Context, *CreateSenderCredentialsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSenderCredential not implemented")
}
func (UnimplementedSMSAPIServer) GetSenderCredential(context.Context, *GetSenderCredentialRequest) (*SenderCredetial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSenderCredential not implemented")
}
func (UnimplementedSMSAPIServer) mustEmbedUnimplementedSMSAPIServer() {}

// UnsafeSMSAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SMSAPIServer will
// result in compilation errors.
type UnsafeSMSAPIServer interface {
	mustEmbedUnimplementedSMSAPIServer()
}

func RegisterSMSAPIServer(s grpc.ServiceRegistrar, srv SMSAPIServer) {
	s.RegisterService(&_SMSAPI_serviceDesc, srv)
}

func _SMSAPI_SendSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSAPIServer).SendSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.apis.SMSAPI/SendSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSAPIServer).SendSMS(ctx, req.(*SendSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMSAPI_CreateSenderCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSenderCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSAPIServer).CreateSenderCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.apis.SMSAPI/CreateSenderCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSAPIServer).CreateSenderCredential(ctx, req.(*CreateSenderCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMSAPI_GetSenderCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSenderCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSAPIServer).GetSenderCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.apis.SMSAPI/GetSenderCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSAPIServer).GetSenderCredential(ctx, req.(*GetSenderCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SMSAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gidyon.apis.SMSAPI",
	HandlerType: (*SMSAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSMS",
			Handler:    _SMSAPI_SendSMS_Handler,
		},
		{
			MethodName: "CreateSenderCredential",
			Handler:    _SMSAPI_CreateSenderCredential_Handler,
		},
		{
			MethodName: "GetSenderCredential",
			Handler:    _SMSAPI_GetSenderCredential_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sms.proto",
}
