// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package settings

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SettingsAPIClient is the client API for SettingsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SettingsAPIClient interface {
	// Updates a user setting preferences
	UpdateSetting(ctx context.Context, in *UpdateSettingRequest, opts ...grpc.CallOption) (*UpdateSettingResponse, error)
	// Retrieves a collection of settings resource
	GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error)
}

type settingsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSettingsAPIClient(cc grpc.ClientConnInterface) SettingsAPIClient {
	return &settingsAPIClient{cc}
}

func (c *settingsAPIClient) UpdateSetting(ctx context.Context, in *UpdateSettingRequest, opts ...grpc.CallOption) (*UpdateSettingResponse, error) {
	out := new(UpdateSettingResponse)
	err := c.cc.Invoke(ctx, "/gidyon.apis.SettingsAPI/UpdateSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsAPIClient) GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error) {
	out := new(GetSettingsResponse)
	err := c.cc.Invoke(ctx, "/gidyon.apis.SettingsAPI/GetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettingsAPIServer is the server API for SettingsAPI service.
// All implementations must embed UnimplementedSettingsAPIServer
// for forward compatibility
type SettingsAPIServer interface {
	// Updates a user setting preferences
	UpdateSetting(context.Context, *UpdateSettingRequest) (*UpdateSettingResponse, error)
	// Retrieves a collection of settings resource
	GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error)
	mustEmbedUnimplementedSettingsAPIServer()
}

// UnimplementedSettingsAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSettingsAPIServer struct {
}

func (UnimplementedSettingsAPIServer) UpdateSetting(context.Context, *UpdateSettingRequest) (*UpdateSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSetting not implemented")
}
func (UnimplementedSettingsAPIServer) GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedSettingsAPIServer) mustEmbedUnimplementedSettingsAPIServer() {}

// UnsafeSettingsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SettingsAPIServer will
// result in compilation errors.
type UnsafeSettingsAPIServer interface {
	mustEmbedUnimplementedSettingsAPIServer()
}

func RegisterSettingsAPIServer(s grpc.ServiceRegistrar, srv SettingsAPIServer) {
	s.RegisterService(&_SettingsAPI_serviceDesc, srv)
}

func _SettingsAPI_UpdateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsAPIServer).UpdateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.apis.SettingsAPI/UpdateSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsAPIServer).UpdateSetting(ctx, req.(*UpdateSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsAPI_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsAPIServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.apis.SettingsAPI/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsAPIServer).GetSettings(ctx, req.(*GetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SettingsAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gidyon.apis.SettingsAPI",
	HandlerType: (*SettingsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateSetting",
			Handler:    _SettingsAPI_UpdateSetting_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _SettingsAPI_GetSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "settings.proto",
}
