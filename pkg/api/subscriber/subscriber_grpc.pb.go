// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package subscriber

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SubscriberAPIClient is the client API for SubscriberAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriberAPIClient interface {
	// Subscribes a user to a channel
	Subscribe(ctx context.Context, in *SubscriberRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unsubscribes a user from a channel
	Unsubscribe(ctx context.Context, in *SubscriberRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Lists subscribers for a channel
	ListSubscribers(ctx context.Context, in *ListSubscribersRequest, opts ...grpc.CallOption) (*ListSubscribersResponse, error)
	// GetSubscriber retrieves information about a single subscriber
	GetSubscriber(ctx context.Context, in *GetSubscriberRequest, opts ...grpc.CallOption) (*Subscriber, error)
}

type subscriberAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriberAPIClient(cc grpc.ClientConnInterface) SubscriberAPIClient {
	return &subscriberAPIClient{cc}
}

func (c *subscriberAPIClient) Subscribe(ctx context.Context, in *SubscriberRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.apis.SubscriberAPI/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberAPIClient) Unsubscribe(ctx context.Context, in *SubscriberRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.apis.SubscriberAPI/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberAPIClient) ListSubscribers(ctx context.Context, in *ListSubscribersRequest, opts ...grpc.CallOption) (*ListSubscribersResponse, error) {
	out := new(ListSubscribersResponse)
	err := c.cc.Invoke(ctx, "/gidyon.apis.SubscriberAPI/ListSubscribers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberAPIClient) GetSubscriber(ctx context.Context, in *GetSubscriberRequest, opts ...grpc.CallOption) (*Subscriber, error) {
	out := new(Subscriber)
	err := c.cc.Invoke(ctx, "/gidyon.apis.SubscriberAPI/GetSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriberAPIServer is the server API for SubscriberAPI service.
// All implementations must embed UnimplementedSubscriberAPIServer
// for forward compatibility
type SubscriberAPIServer interface {
	// Subscribes a user to a channel
	Subscribe(context.Context, *SubscriberRequest) (*empty.Empty, error)
	// Unsubscribes a user from a channel
	Unsubscribe(context.Context, *SubscriberRequest) (*empty.Empty, error)
	// Lists subscribers for a channel
	ListSubscribers(context.Context, *ListSubscribersRequest) (*ListSubscribersResponse, error)
	// GetSubscriber retrieves information about a single subscriber
	GetSubscriber(context.Context, *GetSubscriberRequest) (*Subscriber, error)
	mustEmbedUnimplementedSubscriberAPIServer()
}

// UnimplementedSubscriberAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriberAPIServer struct {
}

func (UnimplementedSubscriberAPIServer) Subscribe(context.Context, *SubscriberRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedSubscriberAPIServer) Unsubscribe(context.Context, *SubscriberRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedSubscriberAPIServer) ListSubscribers(context.Context, *ListSubscribersRequest) (*ListSubscribersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscribers not implemented")
}
func (UnimplementedSubscriberAPIServer) GetSubscriber(context.Context, *GetSubscriberRequest) (*Subscriber, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriber not implemented")
}
func (UnimplementedSubscriberAPIServer) mustEmbedUnimplementedSubscriberAPIServer() {}

// UnsafeSubscriberAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriberAPIServer will
// result in compilation errors.
type UnsafeSubscriberAPIServer interface {
	mustEmbedUnimplementedSubscriberAPIServer()
}

func RegisterSubscriberAPIServer(s grpc.ServiceRegistrar, srv SubscriberAPIServer) {
	s.RegisterService(&_SubscriberAPI_serviceDesc, srv)
}

func _SubscriberAPI_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberAPIServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.apis.SubscriberAPI/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberAPIServer).Subscribe(ctx, req.(*SubscriberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberAPI_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberAPIServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.apis.SubscriberAPI/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberAPIServer).Unsubscribe(ctx, req.(*SubscriberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberAPI_ListSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscribersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberAPIServer).ListSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.apis.SubscriberAPI/ListSubscribers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberAPIServer).ListSubscribers(ctx, req.(*ListSubscribersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberAPI_GetSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberAPIServer).GetSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.apis.SubscriberAPI/GetSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberAPIServer).GetSubscriber(ctx, req.(*GetSubscriberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscriberAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gidyon.apis.SubscriberAPI",
	HandlerType: (*SubscriberAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _SubscriberAPI_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _SubscriberAPI_Unsubscribe_Handler,
		},
		{
			MethodName: "ListSubscribers",
			Handler:    _SubscriberAPI_ListSubscribers_Handler,
		},
		{
			MethodName: "GetSubscriber",
			Handler:    _SubscriberAPI_GetSubscriber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscriber.proto",
}
