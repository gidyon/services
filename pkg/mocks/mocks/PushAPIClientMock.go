// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	pusher "github.com/gidyon/services/pkg/api/messaging/pusher"
)

// PushAPIClientMock is an autogenerated mock type for the PushAPIClientMock type
type PushAPIClientMock struct {
	mock.Mock
}

// SendPushMessage provides a mock function with given fields: ctx, in, opts
func (_m *PushAPIClientMock) SendPushMessage(ctx context.Context, in *pusher.PushMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pusher.PushMessage, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pusher.PushMessage, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewPushAPIClientMockT interface {
	mock.TestingT
	Cleanup(func())
}

// NewPushAPIClientMock creates a new instance of PushAPIClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPushAPIClientMock(t NewPushAPIClientMockT) *PushAPIClientMock {
	mock := &PushAPIClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
