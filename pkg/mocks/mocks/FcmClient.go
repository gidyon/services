// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	fcm "github.com/appleboy/go-fcm"
	mock "github.com/stretchr/testify/mock"
)

// FcmClient is an autogenerated mock type for the FcmClient type
type FcmClient struct {
	mock.Mock
}

// Send provides a mock function with given fields: msg
func (_m *FcmClient) Send(msg *fcm.Message) (*fcm.Response, error) {
	ret := _m.Called(msg)

	var r0 *fcm.Response
	if rf, ok := ret.Get(0).(func(*fcm.Message) *fcm.Response); ok {
		r0 = rf(msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fcm.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*fcm.Message) error); ok {
		r1 = rf(msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendWithContext provides a mock function with given fields: ctx, msg
func (_m *FcmClient) SendWithContext(ctx context.Context, msg *fcm.Message) (*fcm.Response, error) {
	ret := _m.Called(ctx, msg)

	var r0 *fcm.Response
	if rf, ok := ret.Get(0).(func(context.Context, *fcm.Message) *fcm.Response); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fcm.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *fcm.Message) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendWithRetry provides a mock function with given fields: msg, retryAttempts
func (_m *FcmClient) SendWithRetry(msg *fcm.Message, retryAttempts int) (*fcm.Response, error) {
	ret := _m.Called(msg, retryAttempts)

	var r0 *fcm.Response
	if rf, ok := ret.Get(0).(func(*fcm.Message, int) *fcm.Response); ok {
		r0 = rf(msg, retryAttempts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fcm.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*fcm.Message, int) error); ok {
		r1 = rf(msg, retryAttempts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewFcmClientT interface {
	mock.TestingT
	Cleanup(func())
}

// NewFcmClient creates a new instance of FcmClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFcmClient(t NewFcmClientT) *FcmClient {
	mock := &FcmClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
