// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	operation "github.com/gidyon/services/pkg/api/operation"
)

// OperationsClientMock is an autogenerated mock type for the OperationsClientMock type
type OperationsClientMock struct {
	mock.Mock
}

// CreateOperation provides a mock function with given fields: ctx, in, opts
func (_m *OperationsClientMock) CreateOperation(ctx context.Context, in *operation.CreateOperationRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *operation.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *operation.CreateOperationRequest, ...grpc.CallOption) *operation.Operation); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *operation.CreateOperationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOperation provides a mock function with given fields: ctx, in, opts
func (_m *OperationsClientMock) DeleteOperation(ctx context.Context, in *operation.DeleteOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *operation.DeleteOperationRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *operation.DeleteOperationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperation provides a mock function with given fields: ctx, in, opts
func (_m *OperationsClientMock) GetOperation(ctx context.Context, in *operation.GetOperationRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *operation.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *operation.GetOperationRequest, ...grpc.CallOption) *operation.Operation); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *operation.GetOperationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOperations provides a mock function with given fields: ctx, in, opts
func (_m *OperationsClientMock) ListOperations(ctx context.Context, in *operation.ListOperationsRequest, opts ...grpc.CallOption) (*operation.ListOperationsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *operation.ListOperationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *operation.ListOperationsRequest, ...grpc.CallOption) *operation.ListOperationsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.ListOperationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *operation.ListOperationsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOperation provides a mock function with given fields: ctx, in, opts
func (_m *OperationsClientMock) UpdateOperation(ctx context.Context, in *operation.UpdateOperationRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *operation.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *operation.UpdateOperationRequest, ...grpc.CallOption) *operation.Operation); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *operation.UpdateOperationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
